package cMath;


import java.lang.Math;
import java.util.Scanner;

public class CMath {	
	
	
	    // displaying the length from one coordinate to the other
		public void coordLen(double x1,double y1, double x2, double y2) 
		{
			double radius = 6371.01;
			
			x1 = Math.toRadians(x1);
			y1 = Math.toRadians(y1);
			x2 = Math.toRadians(x2);
			y2 = Math.toRadians(y2);
			
			double d = radius * Math.acos(Math.sin(x1) * Math.sin(x2) + Math.cos(x1) * Math.cos(x2) * Math.cos(y1 -y2));
			
			System.out.println(d);
		}
		// making number pyramid 
		public void numPyr(int x) 
		{
			int num = x;
			
			for (int i = 1; i <= num; i++)
			{
				for (int j = num; j > 0; j--)
					
					if (j > i)
						System.out.print("  ");
					else
						System.out.print(j + " ");
					
				for (int j = 2; j <= num; j ++)
					
					if (j > i)
						System.out.print("  ");
					else
						System.out.print(j+" ");
				
			System.out.println();	
			}
		
			
		
		}
		// seeing if a discrmitive is positive or negative 
		public void quadForm(double a, double b, double c)
		{
			double dis = (b*b) - (4*a*c);
			double result = (Math.sqrt(dis));
			double r1 = (-b + result)/2*a;
			double r2 = (-b - result)/2*a;	
			
			if (dis < 0)
			{
				int i = -1;
				double x = (-b)/(2*a);
				double answer = (Math.sqrt(dis*i))/(2*a);
				System.out.println("The roots are imaginary: "+x+" + "+ +answer+ "i and "+x+" - "+answer+"i");
			}
				else if (dis > 0)
				{
					System.out.println("There are two roots: "+r1+" and "+r2);
				}
					else if (dis == 0)
					{
						System.out.println("There is only one root: "+r1);
					}
		}
		// displaying an imaginary number 
		public void imagNum(double x)
		{
			int i = -1;
			double result = x * i;
			double answer = Math.sqrt(result)*i;
			System.out.println(answer+"i");
		}	
		// making a calender based off user input
		public void calender(double year, double day)

		{
			int numOfdays = 0;
			
			// making loop for each month to be placed in order
			for(int month = 1; month < 12; month ++)
			{	
				// making indention for the month to be centered
				System.out.print("        "); 
				
			// switch to adjust the days in the month and also display them in order	
			switch(month)	
			{
			case 1: 
				System.out.println("January"+" "+year);
				numOfdays = 31;
				break;
			
			case 2: 
				System.out.println("Febuary"+" "+year);
				// ensuring I account for leap year
				if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) 
					{
	                numOfdays = 29;
	            	} 
						else
						{
	                	numOfdays = 28;
	            		}
	            		break;   		
	        case 3:
	            System.out.println("March " + year);
	            numOfdays = 31;
	            break;
	        case 4:
	            System.out.println("April " + year);
	            numOfdays = 30;
	            break;
	        case 5:
	            System.out.println("May " + year);
	            numOfdays = 31;
	            break;
	        case 6:
	            System.out.println("June " + year);
	            numOfdays = 30;
	            break;
	        case 7:
	            System.out.println("July " + year);
	            numOfdays = 31;
	            break;
	        case 8:
	            System.out.println("August " + year);
	            numOfdays = 31;
	            break;
	        case 9:
	            System.out.println("September " + year);
	            numOfdays = 30;
	            break;
	        case 10:
	            System.out.println("October " + year);
	            numOfdays = 31;
	            break;
	        case 11:
	            System.out.println("November " + year);
	            numOfdays = 30;
	            break;
	        case 12:
	            System.out.println("December " + year);
	            numOfdays = 31;
	            break;
			}
			
			// basic lines to make the calendar days and a line to seperate the month and days
			System.out.println("------------------------------");	
			System.out.println(" Sun Mon Tue Wed Thu Fri Sat ");
			
			
				
				for(int i = 0; i < day; i++)
				{
					// based on input this will adjust what day we start on
					System.out.print("    "); 
				}
					// this prints the numbers up from 10 with two spaces	
					for (int j = 1 ; j <= numOfdays; j++)
					{
						if (j < 10)
						{
							System.out.print("   "+j);
						}
						else
						{
							// after ten we use less spaces due to double digits
							System.out.print("  "+j);
						}
						// creating a new line if the day modded is 0 meaning every 7 days we create a new line
						if ((j + day) % 7 ==0)
						{
						 System.out.println();
						}
					 	
					}
				// prints a new line between months
				System.out.println();
				day = (day + numOfdays) % 7;// this will cacluate what day the next month should start on based off the last day of the last month
			}
		
			
		}
		// telling user the needed sales for sought after commission
		public void commission(double x)
			{
			// variables for math
			double sales, num,com;
		
			num = x;
			sales = 0;
        	com = 0;
        	// for loop to ensure we get proper output
        	for (com = 0; com <= num;)
        	{
        		// itterating sales to get proper math
        		sales +=.01;
        		// basic if statements to change commission rate throughout program
        		if(sales <= 5000)
        			com = sales * .08;
        		
        		if (sales > 5000 && sales <= 10000)
        			com = (sales - 1000)*.10;

        		if(sales >= 10000)	
	            	com = (sales - 2500) * .12;	
        	}
        	// output to user
			System.out.printf("To reach $%.2f in commission you need $%.2f in sales!",num,sales);
			}
		public void permutation(int x, int y) {
		
			int num1 = x;
			int num2 = y;
			// counter to say how many different combos there are
			int count = 0;
			// initial for loop to have proper line spacing
			for (int i = num1; i < num2; i++) 
			{	
				// this loop displays the numbers a set amount of times
				for (int j = num2; j > num1; j--)
				{	
					// biggest key here is j>i this helps stop the print statment from duplicates
					if(j!=i && j > i)
					{
						// displaying the numbers possible
						System.out.print(i+""+j+"   ");
						count++;
					}	
				}
				// creating new line
				System.out.println("");
				}
			// displaying the amount of combos to user
			System.out.printf("There are %d possible ways for the numbers you selected",count);
		}
		public void reverse(String x)
		{
			// declaring the input as a string
			String word = x;
			// making the length an integer to help reverse
			int len = word.length();
			// for loop to print the index backwards
			for (int i = len-1; i >= 0; i--)
			{
				// output to user
				System.out.print(word.charAt(i));
			}
			
		}
		public void rps(String x)
		{
			Scanner input = new Scanner(System.in);
			boolean game_over = false;
		
			int currentScore = 0;
			int highScore = 0;
			
			
			System.out.print("Hello and welcome to my Game!! Press [1] to play or [2] to chicken out: ");
			String play = input.next();
			
			if (play.equalsIgnoreCase("1"))
			{
				System.out.println("GOOD LUCK!");
			}
			
			else 
			{
				System.out.println("BOOOOO Have a good day I guess...");
				game_over = true;
			}
			
			while(game_over == false)
			{
				int num = (int) (Math.random()*((3 - 1) + 1))+1;
				String pick = null;
				
				switch(num)
				{
				case 1: pick = "Rock";
				break;
				case 2: pick = "Paper";
				break;
				case 3: pick = "Scissors";
				break;
				}
				System.out.println("Type quit at anytime to stop the game.");
				System.out.print("Choose your weapon. Rock, Paper, Scissors: ");
				String choice = input.next();
				
				if (choice.equalsIgnoreCase("Quit")) 
					game_over = true;
				
					else if (pick.equals("Rock") && choice.equals("Scissors"))
					{
						System.out.printf("YOU LOSE! The computer chose %s \n",pick);
						currentScore = 0;
						
						System.out.printf("Your current score is %d and your high score is %d\n", currentScore, highScore);
					}
				
						else if (pick.equals("Paper") && choice.equals("Rock"))
						{
							System.out.printf("YOU LOSE! The computer chose %s \n",pick);
							currentScore = 0;
							
							System.out.printf("Your current score is %d and your high score is %d\n", currentScore, highScore);
						}
				
							else if (pick.equals("Scissors") && choice.equals("Paper"))
							{
									System.out.printf("YOU LOSE! The computer chose %s \n",pick);
									currentScore = 0;
									
									System.out.printf("Your current score is %d and your high score is %d\n", currentScore, highScore);	
							}
				
								else if(choice.equals(pick)) 
								{
										System.out.printf("DRAW! The computer and you are on the same wave length and both chose %s \n", pick);
										System.out.printf("Your current score is %d and your high score is %d \n ", currentScore, highScore);
								}

									else
									{
											System.out.printf("YOU WIN!!! The computer chose %s \n", pick);
											currentScore++;
											if (currentScore > highScore)
											{
												++highScore;
											}
											System.out.printf("Your current score is %d and your high score is %d\n", currentScore, highScore);
											
									}
			System.out.println();	
			}
			
			
		}
		public static int sumDigits(long n)
		{
			// variables for code
			long num = n;
			int ans = 0;
			int count = 0;
			int total = 0;
			// loop to itterate between breaking the number down and using mod
			while(num != 0)
			{	
				// if the count is even than we use mod
				if (count % 2 == 0)
				{
					ans = (int) (num % 10);
					total = total + ans;
				}
					// if count is odd than we use division
					else
					{
						num = num / 10;
					}
			count++;
			} 
			return total;
}		

}
